^["@/pico/pico.ceu"]

pico-state-set-title        <- "Birds - 07 (iterator)"
pico-state-set-size         <- [640,480]
pico-state-set-size-pixel   <- [1,1]
pico-state-set-grid         <- false
pico-state-set-color-clear  <- [0,0,0,255]
pico-state-set-color-draw   <- [255,255,255,255]

random-seed()

val WIN :XY = pico-state-get-size()

task Bird (t) :Rect {
    val y = t[0]
    val speed = t[1]
    set pub() = [[(-WIN.x)/2,y], [100,90]]
    var ang = 0
    watching e1 => (e1 is? :collided) or (pub().pos.x > (WIN.x/2)) {
        par {
            every e2 :Pico.Frame {
                val v = e2.ms * speed
                set pub().pos.x = pub().pos.x + (v/1000)
                set pub().pos.y = y + ((speed/5) * math-sin(ang))
                set ang = ang + ((3.14*v)/100000)
            }
        } with {
            every :Pico.Draw {
                if (math-floor(((ang+(3.14/2))/3.14)) % 2) == 0
                    => pico-output-draw-image(pub().pos, "res/clumsy_up.png");
                    => pico-output-draw-image(pub().pos, "res/clumsy_dn.png");
            }
        }
    }
}

spawn task {
    val birds = tasks(5)
    par {
        every :500:ms {
            (spawn Bird([y,s]) in birds) where {
                val y = -(WIN.y/2) + (random-next() % WIN.y)
                val s = 100 + (random-next() % 100)
            }
        }
    } with {
        every :Pico.Frame {
            loop b1 in birds {
                loop b2 in birds {
                    detrack(b1) { x1 =>
                        val ok1 = detrack(b2) { x2 =>
                            val ok2 = (x1 /= x2) and
                                      pico-rect-vs-rect?(pub(x1), pub(x2))
                            if ok2 {
                                broadcast(:collided) in x2
                            }
                            ok2
                        }
                        if ok1 {
                            broadcast(:collided) in x1
                        }
                    }
                }
            }
        }
    }
}

pico-loop()
