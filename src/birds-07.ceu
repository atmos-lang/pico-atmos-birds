^["@/pico/pico.ceu"]

pico.set.title       <- "Birds - 07 (iterator)"
pico.set.size        <- [640,480]
pico.set.color.clear <- [0,0,0,255]
pico.set.color.draw  <- [255,255,255,255]

random.seed()

task Bird (y, speed) :Rect {
    set pub = [[0,y], [100,90]]
    var ang = 0
    watching e1 | (e1 is? :collided) or (pub.pos.x > 640) {
        par {
            every e2 :Pico.Frame {
                val v = e2.ms * speed
                set pub.pos.x = pub.pos.x + (v/1000)
                set pub.pos.y = y - ((speed/5) * math.sin(ang))
                set ang = ang + ((3.14*v)/100000)
            }
        } with {
            every :Pico.Draw {
                if (math.floor(((ang+(3.14/2))/3.14)) % 2) == 0
                    => pico.output.draw.image(pub.pos, "res/clumsy_up.png");
                    => pico.output.draw.image(pub.pos, "res/clumsy_dn.png");
            }
        }
    }
    pub
}

spawn {
    val birds = tasks(5)
    par {
        every <500:ms> {
            (spawn Bird(y,s) in birds) where {
                val y = random.next() % 480
                val s = 100 + (random.next() % 100)
            }
        }
    } with {
        every :Pico.Frame {
            loop b1 in birds {
                loop b2 in birds {
                    val col? = (b1/=b2) and pico.rect-vs-rect?(b1.pub,b2.pub)
                    if col? {
                        broadcast(:collided) in b1
                        broadcast(:collided) in b2
                    }
                    until col?
                }
            }
        }
    }
}

;;;
spawn {
    every :5:s {
        `ceu_dump_gc();`
    }
}
;;;

pico.loop()
