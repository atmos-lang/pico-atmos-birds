^["@/pico/pico.ceu"]

pico-state-set-title        <- "Birds - 03 (pool)"
pico-state-set-size         <- [640,480]
pico-state-set-size-pixel   <- [1,1]
pico-state-set-grid         <- false
pico-state-set-color-clear  <- [0,0,0,255]
pico-state-set-color-draw   <- [255,255,255,255]

val WIN :XY = pico-state-get-size()

task Bird (t) :Rect {
    val y = t[0]
    val speed = t[1]
    var xx = (-WIN.x) / 2
    var yy = y
    var ang = 0
    par {
        every :Pico.Frame {
            val v = it.ms * speed
            set xx = xx + (v/1000)
            set yy = y + ((speed/5) * math-sin(ang))
            set ang = ang + ((3.14*v)/100000)
        }
    } with {
        every :Pico.Draw {
            if (math-floor(((ang+(3.14/2))/3.14)) % 2) == 0
                => pico-output-draw-image([xx,yy], "res/clumsy_up.png");
                => pico-output-draw-image([xx,yy], "res/clumsy_dn.png");
        }
    }
}

spawn task {
    val birds = tasks()
    loop i in {1 => 5{ {
        (spawn Bird([y,s]) in birds) where {
            val y = -(WIN.y/2) + (100*i)
            val s = 100 + (10*i)
        }
    }
    await(false)
}

pico-loop()
