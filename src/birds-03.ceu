^"prelude.ceu"
^"int.ceu"
^"float.ceu"
^"pico.ceu"

var pi: _float = _(3.14)

output Pico.Set.Title _("Birds - 03 (pool)")
output Pico.Set.Size [_640,_480]
output Pico.Set.Zoom [_100,_100]
output Pico.Set.Grid _0
output Pico.Set.Color.Clear [_0,_0,_0,_255]
output Pico.Clear
output Pico.Set.Auto _0

var win: Size
output Pico.Get.Size.Window [/win]

type Bird = task [_int,_int] -> () -> ()

var bird = Bird {       -- arg = [y,speed]
    var speed = arg.2
    var rct: Rect = [[x,arg.1], [_50,_45]]
        where {
            var x: _int = div [umn win.1, _2]
        }
    var sin: _float = _0

    par {
        var xx: _float = rct.1.1
        var yy: _float = rct.1.2
        every evt?Frame {
            var xspeed = speed
            var v: _float = mul [evt!Frame,speed]
            set xx = fadd [xx, fdiv [v,_1000]]
            set rct.1 = [x,y]
                where {
                    var x: _int = f2int xx
                    var y: _int = fadd [yy, fmul [int2f div [xspeed,_5],_(sin($sin))]]
                }
            set sin = fadd [sin, _($pi*$v/100000)]
        }
    } with {
        every evt?Draw {
            if _( ((int)(($sin+$pi/2)/$pi)) % 2 == 0 ) {
                output Pico.Draw.Image [rct.1, _("res/clumsy_up.png")]
            } else {
                output Pico.Draw.Image [rct.1, _("res/clumsy_dn.png")]
            }
        }
    }
}

spawn {
    var birds: active {} Bird
    var i: _int = _1
    loop {
        spawn bird [y,s] in birds
            where {
                var y = sub [mul [_100,i], _300]
                var s = add [_100, mul [_10,i]]
            }
        if eq [i,_5] {
            break
        } else {
            set i = add [i,_1]
        }
    }
    await _0
}

call pico_loop ()
