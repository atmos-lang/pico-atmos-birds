;;LUA_PATH="/x/atmos/atmos/src/?.lua;" lua5.4 /x/atmos/atmos/src/atmos.lua birds-07.atm

val SDL = require "SDL"
val IMG = require "SDL.image"

defer {
    IMG.quit()
    SDL.quit()
}

val WIN = SDL.createWindow @{
	title  = "Birds - 07 (iterator)",
	width  = 640,
	height = 480,
    flags  = @{ SDL.flags.OpenGL },
} -> assert
val REN = SDL.createRenderer(WIN,-1) -> assert

val UP = ren where {
    sfc = IMG.load("res/bird-up.png") -> assert
    ren = REN::createTextureFromSurface(sfc) -> assert
}
val DN = ren where {
    sfc = IMG.load("res/bird-dn.png") -> assert
    ren = REN::createTextureFromSurface(sfc) -> assert
}
val _,_,W,H = UP::query()

math.randomseed()

func Bird (y, speed) {
    set pub = @{x=0,y=y,w=W,h=H}
    var img = DN
    watching true, (pub.x>640) || (evt==:collided) {
        par {
            var ang = 0
            every :Pico.Frame {
                val v = evt * speed
                set pub.x = pub.x + (v/1000) --> math.floor
                set pub.y = y - ((speed/5) * math.sin(ang)) --> math.floor
                set ang = ang + ((3.14*v)/100000)
                val tmp = (ang + (3.14/2)) / 3.14 --> math.floor
                set img = match tmp % 2 {
                    0 => UP
                    1 => DN
                }
            }
        } with {
            every :Pico.Draw {
                REN::copy(img, nil, pub)
            }
        }
    }
}

spawn {
    every :Pico.Draw {
        REN::setDrawColor(0x000000)
        REN::clear()
    }
}
spawn {
    pin birds = tasks(5)
    par {
        every @.500 {
            spawn [birds] Bird (y,s) where {
                y = math.random(0, 480)
                s = 100 + math.random(0, 100)
            }
        }
    } with {
        every :Pico.Frame {
            loop b1 in birds {
                loop b2 in birds {
                    val col = (b1!=b2) && SDL.hasIntersection(b1.pub,b2.pub)
                    if col {
                        emit [b1] :collided
                        emit [b2] :collided
                        break()
                    }
                }
            }
        }
    }
}
spawn {
    every :Pico.Draw {
        REN::present()
    }
}

val MS_PER_FRAME = 40
var old = SDL.getTicks() - MS_PER_FRAME
var ms = 0
loop {
	val e = SDL.waitEvent(ms)
    if e == nil {
        val cur = SDL.getTicks()
        if (cur - old) >= MS_PER_FRAME {
            set old = cur
            emit(:clock, MS_PER_FRAME)
            emit(:Pico.Frame, MS_PER_FRAME)
        }
    } else {
        match e.type {
            SDL.event.Quit            => break()
            SDL.event.MouseButtonUp   => emit(:Pico.Mouse.Button.Up(e))
            SDL.event.MouseButtonDown => emit(:Pico.Mouse.Button.Dn(e))
            SDL.event.MouseMotion     => emit(:Pico.Mouse.Motion(e))
            SDL.event.KeyDown => {
                set e.name = SDL.getKeyName(e.keysym.sym)
                emit(:Pico.Key.Dn(e))
            }
        }
    }
    emit(:Pico.Draw)
}
