^["@/pico/pico.ceu"]

val math-sin = func (v) {
    `:number sin($v.Number)`
}

val math-floor = func (v) {
    `:number floor($v.Number)`
}

pico-state-set-title        ("Birds - 01 (task)")
pico-state-set-size         ([640,480])
pico-state-set-size-pixel   ([1,1])
pico-state-set-grid         (false)
pico-state-set-color-clear  ([0,0,0,255])
pico-state-set-color-draw   ([255,255,255,255])

val WIN :XY = pico-state-get-size()

val Bird = task (t) {
    val y = t[0]
    val speed = t[1]
    var xx = (-WIN.x) / 2
    var yy = y
    var ang = 0
    spawn (task () {
        loop {
            val v = loop { ;; AWAIT
                break if yield(nil) thus { as it :Pico.Frame =>
                    if is?(it, :Pico.Frame) {
                        it.ms * speed
                    } else {
                        false
                    }
                }
            }
            set xx = xx + (v/1000)
            set yy = y + ((speed/5) * math-sin(ang))
            set ang = ang + ((3.14*v)/100000)
        }
    }) ()
    spawn (task () {
        loop {
            loop { ;; AWAIT
                break if yield(nil) thus { as it =>
                    is?(it, :Pico.Draw)
                }
            }
            if (math-floor(((ang+(3.14/2))/3.14)) % 2) == 0 {
                pico-output-draw-image([xx,yy], "res/clumsy_up.png");
            } else {
                pico-output-draw-image([xx,yy], "res/clumsy_dn.png");
            }
        }
    }) ()
    loop {
        yield(nil)
    }
}

spawn Bird ([150, 100])
spawn Bird ([  0, 200])

loop {
    val e = resume pico-coro ()
    break if do {
        if e {
            broadcast(e)
            is?(e, :Pico.Quit)
        } else {
            nil
        }
    }
}
