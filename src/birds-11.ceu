^["pico.ceu"]

pico_state_set_title("Birds - 11 (tracking)")
pico_state_set_size(640,480)
pico_state_set_size_pixel(1,1)
pico_state_set_grid(false)
pico_state_set_color_clear(0,0,0,255)
pico_state_set_color_draw(255,255,255,255)

var win = pico_state_get_size()

task Bird (y,speed) :awakes {
    set pub = [(-win.0)/2, y, 100, 90]
    var sin = 0
    awaiting pub.0 > 320 {
        awaiting :collided {
            par {
                every :frame {
                    var v = evt.0 * speed
                    set pub.0 = pub.0 + (v/1000)
                    set pub.1 = y + ((speed/5) * `:number sin($sin.Number)`)
                    set sin = sin + ((3.14*v)/100000)
                }
            } with {
                every :draw {
                    if (`:number ((int)((($sin.Number+(3.14/2)))/3.14))` % 2) == 0 {
                        pico_output_draw_image(pub.0,pub.1, "res/clumsy_up.png");
                    } else {
                        pico_output_draw_image(pub.0,pub.1, "res/clumsy_dn.png");
                    }
                }
            }
        }
        awaiting pub.1 < -200 {
            par {
                every :frame {
                    set pub.1 = pub.1 - (evt.0 * 0.5)
                }
            } with {
                every :draw {
                    pico_output_draw_image(pub.0,pub.1, "res/clumsy_dn.png");
                }
            }
        }
        awaiting 1s {
            par {
                while true {
                    broadcast in :task, tags([], :hide, true)
                    await 100ms
                    broadcast in :task, tags([], :show, true)
                    await 100ms
                }
            } with {
                toggle :hide -> :show {
                    every :draw {
                        pico_output_draw_image(pub.0,pub.1, "res/clumsy_dn.png");
                    }
                }
            }
        }
    }
}

spawn {
    par {
        toggle :pause -> :resume {
            var birds = coroutines(5)
            par {
                every 500ms {
                    (spawn in birds, Bird(y,s)) where {
                        var y = (`:number rand()` % 480) - 240
                        var s = 100 + (`:number rand()` % 100)
                    }
                }
            } with {
                every :frame {
                    while in :coros birds, b1 {
                        while in :coros birds, b2 {
                            if detrack(b1) and (detrack(b1) /= detrack(b2)) {
                                var r1 = copy(detrack(b1).pub)
                                var r2 = copy(detrack(b2).pub)
                                if pico_rect_vs_rect?(r1,r2) {
                                    broadcast in detrack(b1), tags([], :collided, true)
                                    broadcast in detrack(b2), tags([], :collided, true)
                                }
                            }
                        }
                    }
                }
            } with {
                while true {
                    var bird = catch true {
                        every :mousebuttondown {
                            while in :coros birds, b {
                                var pt = [evt.0, evt.1]
                                var r  = copy(detrack(b).pub)
                                if pico_point_vs_rect?(pt,r) {
                                    throw(b)
                                }
                            }
                        }
                    }
                    awaiting bird {
                        every :draw {
                            pico_output_draw_line([0,-240], copy(detrack(bird).pub))
                        }
                    }
                }
            }
        }
    } with {
        while true {
            await (evt is :keydown) and (evt.1 == :Key.P)
            broadcast in :global, tags([], :pause, true)
            awaiting (evt is :keydown) and (evt.1 == :Key.P) {
                every :draw {
                    pico_output_draw_image(0,0, "res/pause.png");
                }
            }
            broadcast in :global, tags([], :resume, true)
        }
    }
}

pico_loop ()
