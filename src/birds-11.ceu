^["@/pico/pico.ceu"]

pico-state-set-title        <- "Birds - 11 (tracking)"
pico-state-set-size         <- [640,480]
pico-state-set-size-pixel   <- [1,1]
pico-state-set-grid         <- false
pico-state-set-color-clear  <- [0,0,0,255]
pico-state-set-color-draw   <- [255,255,255,255]

random-seed()

val WIN :XY = pico-state-get-size()

data :Bird = [alive,rect:Rect]

task Bird (t) :Bird {
    val y = t[0]
    val speed = t[1]
    set pub() = [true, [[(-WIN.x)/2,y], [100,90]]]
    var ang = 0
    watching (pub().rect.pos.x > (WIN.x/2)) {
        watching :collided {
            par {
                every :Pico.Frame {
                    val v = it.ms * speed
                    set pub().rect.pos.x = pub().rect.pos.x + (v/1000)
                    set pub().rect.pos.y = y + ((speed/5) * math-sin(ang))
                    set ang = ang + ((3.14*v)/100000)
                }
            } with {
                every :Pico.Draw {
                    if (math-floor(((ang+(3.14/2))/3.14)) % 2) == 0
                        => pico-output-draw-image(pub().rect.pos, "res/clumsy_up.png");
                        => pico-output-draw-image(pub().rect.pos, "res/clumsy_dn.png");
                }
            }
        }
        set pub().alive = false
        watching pub().rect.pos.y < -((WIN.y/2) - 45) {
            par {
                every :Pico.Frame {
                    set pub().rect.pos.y = pub().rect.pos.y - (it.ms * 0.5)
                }
            } with {
                every :Pico.Draw {
                    pico-output-draw-image(pub().rect.pos, "res/clumsy_dn.png");
                }
            }
        }
        watching 1:s {
            loop {
                await (100:ms)
                watching 100:ms {
                    every :Pico.Draw {
                        pico-output-draw-image(pub().rect.pos, "res/clumsy_dn.png");
                    }
                }
            }
        }
    }
}

spawn {
    par {
        toggle :pause => :resume {
            val birds = tasks(5)
            par {
                every 500:ms {
                    (spawn Bird(y,s) in birds) where {
                        val y = -(WIN.y/2) + (random-next() % WIN.y)
                        val s = 100 + (random-next() % 100)
                    }
                }
            } with {
                every :Pico.Frame {
                    loop b1 in birds {
                        loop b2 birds {
                            val col? =
                                detrack(b1) as { x1 ;;; :Bird ;;; =>
                                    detrack(b2) as { x2 ;;; :Bird ;;; =>
                                        (x1 /= x2)      &&
                                        (pub(x1).alive) &&
                                        (pub(x2).alive) &&
                                        pico-rect-vs-rect?(pub(x1).rect, pub(x2).rect)
                                }
                            }
                            if col? {
                                broadcast(:collided) in b1
                                broadcast(:collided) in b2
                            }
                        }
                    }
                }
            } with {
                loop {
                    val bird = loop {
                        until
                            every but :Pico.Mouse.Button.Dn {
                                loop b in birds {
                                    until detrack(b) as {
                                        pico-point-vs-rect?(but.pos, pub(it).(:Bird).rect)
                                    }
                                }
                            }
                    }
                    watching bird {
                        every :Pico.Draw {
                            detrack(bird) as {
                                pico-output-draw-line([0,-240], pub(it) ;;;.(:Bird);;; .rect.pos)
                            }
                        }
                    }
                }
            }
        }
    } with {
        loop {
            await (:Pico.Key.Dn => it.key==:Key-P)
            broadcast :pause
            watching (:Pico.Key.Dn => it.key==:Key-P) {
                every :Pico.Draw {
                    pico-output-draw-image([0,0], "res/pause.png");
                }
            }
            broadcast (:resume)
        }
    }
}

loop {
    val e = resume pico-coro ()
    break if do {
        if e {
            broadcast(e)
            is?(e, :Pico.Quit)
        } else {
            nil
        }
    }
}
