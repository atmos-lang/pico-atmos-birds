^["@/pico/pico.ceu"]

pico.set.title       <- "Birds - 11 (tracking)"
pico.set.size        <- [640,480]
pico.set.color.clear <- [0,0,0,255]
pico.set.color.draw  <- [255,255,255,255]

random.seed()
val end :XY = pico.pct-to-pos(1,1)

data :Bird = [alive,rect:Rect]

task Bird (y, speed) :Bird {
    set pub = [true, [[0,y], [100,90]]]
    var ang = 0
    watching |(pub.rect.pos.x > end.x) {
        watching :collided {
            par {
                every :Pico.Frame {
                    val v = it.ms * speed
                    set pub.rect.pos.x = pub.rect.pos.x + (v/1000)
                    set pub.rect.pos.y = y - ((speed/5) * math.sin(ang))
                    set ang = ang + ((3.14*v)/100000)
                }
            } with {
                every :Pico.Draw {
                    if (math.floor(((ang+(3.14/2))/3.14)) % 2) == 0
                        => pico.output.draw.image(pub.rect.pos, "res/clumsy_up.png");
                        => pico.output.draw.image(pub.rect.pos, "res/clumsy_dn.png");
                }
            }
        }
        set pub.alive = false
        watching | (pub.rect.pos.y > (end.y-50)) {
            par {
                every :Pico.Frame {
                    set pub.rect.pos.y = pub.rect.pos.y + (it.ms * 0.5)
                }
            } with {
                every :Pico.Draw {
                    pico.output.draw.image(pub.rect.pos, "res/clumsy_dn.png");
                }
            }
        }
        watching <1:s> {
            loop {
                await <100:ms>
                watching <100:ms> {
                    every :Pico.Draw {
                        pico.output.draw.image(pub.rect.pos, "res/clumsy_dn.png");
                    }
                }
            }
        }
    }
    pub
}

spawn {
    par {
        toggle :Show {
            val birds = tasks(5)
            par {
                every <500:ms> {
                    (spawn Bird(y,s) in birds) where {
                        val y = (random.next() % end.y)
                        val s = 100 + (random.next() % 100)
                    }
                }
            } with {
                every :Pico.Frame {
                    loop b1 in birds {
                        loop b2 in birds {
                            val col? = do {
                                val' p1 :Bird = b1.pub
                                val' p2 :Bird = b2.pub
                                (b1 /= b2) and
                                (p1.alive) and
                                (p2.alive) and
                                pico.rect-vs-rect?(p1.rect, p2.rect)
                            }
                            if col? {
                                broadcast(:collided) in b1
                                broadcast(:collided) in b2
                            }
                            until col?
                        }
                    }
                }
            } with {
                loop {
                    val bird :Bird =
                        every but :Pico.Mouse.Button.Dn {
                            until
                                loop b :Bird in birds {
                                    until b.pub.alive and pico.point-vs-rect?(but.pos,b.pub.rect) and b
                                }
                            }
                    watching ==bird {
                        val pos = pico.pct-to-pos(0.5, 1)
                        every :Pico.Draw {
                            pico.output.draw.line(pos, bird.pub.rect.pos)
                        }
                    }
                }
            }
        }
    } with {
        val cnt = pico.pct-to-pos(0.5,0.5)
        loop {
            await (:Pico.Key.Dn | it.key==:Key-P)
            broadcast (:Show [false]) in :global
            watching (:Pico.Key.Dn | it.key==:Key-P) {
                every :Pico.Draw {
                    pico.output.draw.image(cnt, "res/pause.png");
                }
            }
            broadcast (:Show [true]) in :global
        }
    }
}

;;;
spawn {
    every :5:s {
        `ceu_dump_gc();`
    }
}
;;;

pico.loop ()
