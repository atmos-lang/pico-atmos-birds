^["@/pico/pico.ceu"]

pico.set.title       <- "Birds - 09 (blink)"
pico.set.size        <- [640,480]
pico.set.grid        <- false
pico.set.color.clear <- [0,0,0,255]
pico.set.color.draw  <- [255,255,255,255]

random.seed()

data :Bird = [alive,rect:Rect]

task Bird (y, speed) :Bird {
    set pub = [true, [[0,y], [100,90]]]
    var ang = 0
    watching |(pub.rect.pos.x > 640) {
        watching :collided {
            par {
                every :Pico.Frame {
                    val v = it.ms * speed
                    set pub.rect.pos.x = pub.rect.pos.x + (v/1000)
                    set pub.rect.pos.y = y - ((speed/5) * math.sin(ang))
                    set ang = ang + ((3.14*v)/100000)
                }
            } with {
                every :Pico.Draw {
                    if (math.floor(((ang+(3.14/2))/3.14)) % 2) == 0
                        => pico.output.draw.image(pub.rect.pos, "res/clumsy_up.png");
                        => pico.output.draw.image(pub.rect.pos, "res/clumsy_dn.png");
                }
            }
        }
        set pub.alive = false
        watching |(pub.rect.pos.y > (480-50)) {
            par {
                every :Pico.Frame {
                    set pub.rect.pos.y = pub.rect.pos.y + (it.ms * 0.5)
                }
            } with {
                every :Pico.Draw {
                    pico.output.draw.image(pub.rect.pos, "res/clumsy_dn.png");
                }
            }
        }
        watching <1:s> {
            loop {
                await <100:ms>
                watching <100:ms> {
                    every :Pico.Draw {
                        pico.output.draw.image(pub.rect.pos, "res/clumsy_dn.png");
                    }
                }
            }
        }
    }
    pub
}

spawn {
    val birds = tasks(5)
    par {
        every <500:ms> {
            (spawn Bird(y,s) in birds) where {
                val y = random.next() % 480
                val s = 100 + (random.next() % 100)
            }
        }
    } with {
        every :Pico.Frame {
            loop b1 :Bird in birds {
                val r1 = b1.pub.rect
                loop b2 :Bird in birds {
                    val r2 = b2.pub.rect
                    val col? = (b1/=b2) and pico.rect-vs-rect?(r1,r2)
                    if col? {
                        broadcast(:collided) in b1
                        broadcast(:collided) in b2
                    }
                    until col?
                }
            }
        }
    }
}

pico.loop ()
