^["@/pico/pico.ceu"]

val math-sin = func (v) {
    `:number sin($v.Number)`
}
val math-floor = func (v) {
    `:number floor($v.Number)`
}
val random-seed = func (n) {
    if n {
        `srand($n.Number);`
    } else {
        `srand(time(NULL));`
    }
}
val random-next = func () {
    `:number rand()`
}

pico-state-set-title        ("Birds - 11 (tracking)")
pico-state-set-size         ([640,480])
pico-state-set-size-pixel   ([1,1])
pico-state-set-grid         (false)
pico-state-set-color-clear  ([0,0,0,255])
pico-state-set-color-draw   ([255,255,255,255])

random-seed()

val WIN :XY = pico-state-get-size()

val Delay = task (ms) {
    var tot = ms
    loop {
        val e = yield(nil)
        break if do {
            if is?(e,:Clock) {
                set tot = tot - e[0]
                tot <= 0
            } else {
                false
            }
        }
    }
}

data :Bird = [alive,rect:Rect]

val Bird = task (t) :Bird {
    val y = t[0]
    val speed = t[1]
    set pub() = [true, [[(-WIN.x)/2,y], [100,90]]]
    var ang = 0
    val Y =
        spawn (task :nested () {
            loop {
                val e :Pico.Frame = yield(nil)
                break if do {
                    if is?(e, :Pico.Frame) {
                        val v = e.ms * speed
                        set pub().rect.pos.x = pub().rect.pos.x + (v/1000)
                        set pub().rect.pos.y = y + ((speed/5) * math-sin(ang))
                        set ang = ang + ((3.14*v)/100000)
                        false
                    } else {
                        if is?(e, :Pico.Draw) {
                            if (math-floor(((ang+(3.14/2))/3.14)) % 2) == 0 {
                                pico-output-draw-image(pub().rect.pos, "res/clumsy_up.png");
                            } else {
                                pico-output-draw-image(pub().rect.pos, "res/clumsy_dn.png");
                            }
                            false
                        } else {
                            (e == :collided)
                        }
                    }
                }
            }

            set pub().alive = false

            loop {
                val e :Pico.Frame = yield(nil)
                break if do {
                    if is?(e, :Pico.Frame) {
                        set pub().rect.pos.y = pub().rect.pos.y - (e.ms * 0.5)
                        (pub().rect.pos.y < -((WIN.y/2) - 45))
                    } else {
                        if is?(e, :Pico.Draw) {
                            pico-output-draw-image(pub().rect.pos, "res/clumsy_dn.png");
                            false
                        } else {
                            false
                        }
                    }
                }
            }

            spawn (task :nested () {
                loop {
                    do {
                        val awt = spawn Delay(100)
                        loop {
                            val e = yield(nil)
                            break if e==awt
                        }
                    }
                    spawn (task :nested () {
                        loop {
                            val e = yield(nil)
                            if is?(e, :Pico.Draw) {
                                pico-output-draw-image(pub().rect.pos, "res/clumsy_dn.png")
                            } else {
                                nil
                            }
                        }
                    }) ()
                    do {
                        val awt = spawn Delay(100)
                        loop {
                            val e = yield(nil)
                            break if e==awt
                        }
                    }
                }
            }) ()

            do {
                val awt = spawn Delay(1000)
                loop {
                    val e = yield(nil)
                    break if e==awt
                }
            }
        }) ()

    loop {
        break if (pub().rect.pos.x > (WIN.x/2))
        val e = yield(nil)
        break if e==Y
    }
}

spawn (task () {
    val game = spawn (task () {
        val birds = tasks(5)
        spawn (task () {
            loop {
                do {
                    val awt = spawn Delay(500)
                    loop {
                        val e = yield(nil)
                        break if e==awt
                    }
                    `ceu_dump_gc();`
                }
                val y = -(WIN.y/2) + (random-next() % WIN.y)
                val s = 100 + (random-next() % 100)
                spawn Bird([y,s]) in birds
            }
        }) ()
        spawn (task () {
            loop {
                loop { ;; AWAIT
                    val e = yield(nil)
                    break if is?(e, :Pico.Frame)
                }
                var b1 :Bird = nil
                loop {
                    set b1 = next-tasks(birds, b1)
                    break if b1==nil
                    var b2 :Bird = nil
                    loop {
                        set b2 = next-tasks(birds, b2)
                        break if b2==nil
                        val col? = do {
                            (b1 /= b2)      &&
                            (pub(b1).alive) &&
                            (pub(b2).alive) &&
                            pico-rect-vs-rect?(pub(b1).rect, pub(b2).rect)
                        }
                        if col? {
                            broadcast(:collided) in b1
                            broadcast(:collided) in b2
                        } else {
                            nil
                        }
                    }
                }
            }
        }) ()
        spawn (task () {
            loop {
                val bird :Bird =
                    loop {
                        val e :Pico.Mouse.Button = yield(nil)
                        break if do {
                            if is?(e, :Pico.Mouse.Button.Dn) {
                                var b :Bird = nil
                                loop {
                                    set b = next-tasks(birds, b)
                                    break(false) if b==nil
                                    break(b) if pico-point-vs-rect?(e.pos, pub(b).rect)
                                }
                            } else {
                                nil
                            }
                        }
                    }
println(:bird, bird)
                loop {
                    val e = yield(nil)
                    break if do {
                        if status(bird) == :terminated {
                            true
                        } else {
                            if is?(e, :Pico.Draw) {
                                pico-output-draw-line([0,-240], pub(bird).rect.pos)
                            } else {
                                nil
                            }
                            false
                        }
                    }
                }
            }
        }) ()
        loop {
            yield(nil)
        }
    }) ()
    loop {
        loop { ;; AWAIT
            val e :Pico.Key = yield(nil)
            break if do {
                if is?(e, :Pico.Key.Dn) {
                    (e.key == :Key-P)
                } else {
                    false
                }
            }
        }
        toggle game(false)
        loop {
            val e :Pico.Key.Dn = yield(nil)
            break if do {
                if is?(e, :Pico.Draw) {
                    pico-output-draw-image([0,0], "res/pause.png");
                    false
                } else {
                    if is?(e, :Pico.Key.Dn) {
                        (e.key == :Key-P)
                    } else {
                        nil
                    }
                }
            }
        }
        toggle game(true)
    }
}) ()

pico-loop()
