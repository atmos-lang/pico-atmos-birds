#include "pico.ce"

#define PI 3.14

output pico <.USet_Title _("Birds - 01 (task)")>: TPico
output pico <.USet_Size [_640,_480]>: TPico
output pico <.USet_Zoom [_100,_100]>: TPico
output pico <.USet_Grid _0>: TPico
output pico <.USet_Color_Clear [_0,_0,_0,_255]>: TPico
output pico <.UClear>: TPico
output pico <.USet_Auto _0>: TPico

var win: [_int,_int]
output pico <.UGet_Size /win>: TPico

--type Bird = task [_int,_int] -> () -> ()

var bird = task [_int,_int] -> () -> () { -- arg = [y,speed]
    var speed = arg.2
    var rct: [_int,_int,_int,_int] = [_(-${win}._1/2),arg.1, _50,_45]
    var sin: _float = _0

    var xx: _float = rct.1
    var yy: _float = rct.2
    loop {
        await evt?UTimeout

        var v: _float = _(100 * $speed)
        set xx = _( $xx + $v/1000 )
--native _(printf(">>> %f\\n", $xx);)
        set rct.1 = xx
        set rct.2 = _( $yy + $speed/5*sin($sin) )
        set sin = _( $sin + PI*$v/100000 )

        if _( ((int)(($sin+PI/2)/PI)) % 2 == 0 ) {
            output pico <.UDraw_Image [[rct.1,rct.2], _("res/clumsy_up.png")]>: TPico
        } else {
            output pico <.UDraw_Image [[rct.1,rct.2], _("res/clumsy_dn.png")]>: TPico
        }
    }
}

var b1 = spawn bird [_100, _100]
var b2 = spawn bird [_200, _200]

loop {
    var e: Event = input pico <.UEvent_Timeout [_SDL_ANY,_100]>: TPico
    --output std /e
    output pico <.UClear>: TPico
    emit e
    output pico <.UPresent>: TPico
}
