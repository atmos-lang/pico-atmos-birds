^["@/pico/pico.ceu"]

pico-state-set-title        <- "Birds - 08 (fall)"
pico-state-set-size         <- [640,480]
pico-state-set-size-pixel   <- [1,1]
pico-state-set-grid         <- false
pico-state-set-color-clear  <- [0,0,0,255]
pico-state-set-color-draw   <- [255,255,255,255]

random-seed()

val WIN :XY = pico-state-get-size()

data :Bird = [alive,rect:Rect]

task Bird (y, speed) :Bird {
    set pub = [true, [[(-WIN.x)/2,y], [100,90]]]
    var ang = 0
    watching ,(pub.rect.pos.x > (WIN.x/2)) {
        watching :collided {
            par {
                every :Pico.Frame {
                    val v = it.ms * speed
                    set pub.rect.pos.x = pub.rect.pos.x + (v/1000)
                    set pub.rect.pos.y = y + ((speed/5) * math-sin(ang))
                    set ang = ang + ((3.14*v)/100000)
                }
            } with {
                every :Pico.Draw {
                    if (math-floor(((ang+(3.14/2))/3.14)) % 2) == 0
                        => pico-output-draw-image(pub.rect.pos, "res/clumsy_up.png");
                        => pico-output-draw-image(pub.rect.pos, "res/clumsy_dn.png");
                }
            }
        }
        set pub.alive = false
        watching ,(pub.rect.pos.y < -((WIN.y/2) - 45)) {
            par {
                every :Pico.Frame {
                    set pub.rect.pos.y = pub.rect.pos.y - (it.ms * 0.5)
                }
            } with {
                every :Pico.Draw {
                    pico-output-draw-image(pub.rect.pos, "res/clumsy_dn.png");
                }
            }
        }
    }
    pub
}

spawn {
    val birds = tasks(5)
    par {
        every :500:ms {
            (spawn Bird(y,s) in birds) where {
                val y = -(WIN.y/2) + (random-next() % WIN.y)
                val s = 100 + (random-next() % 100)
            }
        }
    } with {
        every :Pico.Frame {
            loop b1 :Bird in birds {
                val r1 = b1.pub.rect
                loop b2 :Bird in birds {
                    val r2 = b2.pub.rect
                    val col? = (b1/=b2) and pico-rect-vs-rect?(r1,r2)
                    if col? {
                        broadcast(:collided) in b1
                        ;;println(b1, b2, status(b1), status(b2))
                        broadcast(:collided) in b2
                    }
                    break if col?
                }
            }
        }
    }
}

pico-loop ()
