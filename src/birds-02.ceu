^"int.ceu"
^"float.ceu"
^"pico.ceu"

var pi: _float = _(3.14)

output pico Pico.Set_Title _("Birds - 02 (scope)")
output pico Pico.Set_Size [_640,_480]
output pico Pico.Set_Zoom [_100,_100]
output pico Pico.Set_Grid _0
output pico Pico.Set_Color_Clear [_0,_0,_0,_255]
output pico Pico.Clear
output pico Pico.Set_Auto _0

var win: Size
output pico Pico.Get_Size /win

type Bird = task [_int,_int] -> () -> ()

var bird = Bird {       -- arg = [y,speed]
    var speed = arg.2
    var rct: Rect = [[x,arg.1], [_50,_45]]
        where {
            var x: _int = div [umn win.1, _2]
        }
    var sin: _float = _0

    par {
        var xx: _float = rct.1.1
        var yy: _float = rct.1.2
        every evt?Frame {
            var xspeed = speed
            var v: _float = mul [evt!Frame,speed]
            set xx = fadd [xx, fdiv [v,_1000]]
            set rct.1 = [x,y]
                where {
                    var x: _int = f2int xx
                    var y: _int = fadd [yy, fmul [int2f div [xspeed,_5],_(sin($sin))]]
                }
            set sin = fadd [sin, _($pi*$v/100000)]
        }
    } with {
        every evt?Draw {
            if _( ((int)(($sin+$pi/2)/$pi)) % 2 == 0 ) {
                output pico Pico.Draw_Image [rct.1, _("res/clumsy_up.png")]
            } else {
                output pico Pico.Draw_Image [rct.1, _("res/clumsy_dn.png")]
            }
        }
    }
}

spawn {
    loop {
        spawn bird [_150, _100]
        spawn bird [  _0, _200]
        await evt?MouseButtonDown
    }
}

call pico_loop ()
